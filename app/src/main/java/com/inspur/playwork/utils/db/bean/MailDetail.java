package com.inspur.playwork.utils.db.bean;

import com.inspur.playwork.utils.db.dao.DaoSession;
import com.inspur.playwork.utils.db.dao.MailAttachmentDao;
import com.inspur.playwork.utils.db.dao.MailDetailDao;
import com.inspur.playwork.utils.db.dao.MailDirectoryDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MAIL_DETAIL".
 */
public class MailDetail {
//    0：已收取 1：已发送 2：待发送 3：正在发送 4：发送失败
    public final static int MAIL_TYPE_NO_STATUS = 0;
    public final static int MAIL_TYPE_SENT = 1;
    public final static int MAIL_TYPE_IS_SENDING = 2;
    public final static int MAIL_TYPE_WILL_SEND = 3;
    public final static int MAIL_TYPE_SEND_FAILED = 4;

    private Long id;
    /** Not-null value. */
    private String email;
    private String uid;
    private String messageId;
    private String references;
    private String subject;
    private Long sentDate;
    private String from;
    private String to;
    private String cc;
    private String sc;
    private String content;
    private boolean encrypted;
    private boolean signed;
    private String size;
    private boolean isRead;
    private boolean isDeleted;
    private boolean isMarked;
    private boolean hasAttachment;
    private java.util.Date createTime;
    private java.util.Date updateTime;
    private long directoryId;
    private long sentPercentage;
    private long sendStatus;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MailDetailDao myDao;

    private MailDirectory mailDirectory;
    private Long mailDirectory__resolvedKey;

    private List<MailAttachment> attachments;

    public MailDetail() {
    }

    public MailDetail(Long id) {
        this.id = id;
    }

    public MailDetail(Long id, String email, String uid, String messageId, String references,
                      String subject, Long sentDate, String from, String to, String cc, String sc,
                      String content, boolean encrypted, boolean signed,String size, boolean isRead,
                      boolean isDeleted, boolean isMarked,boolean hasAttachment, java.util.Date createTime,
                      java.util.Date updateTime, long directoryId,long sentPercentage,long sendStatus) {
        this.id = id;
        this.email = email;
        this.uid = uid;
        this.messageId = messageId;
        this.references = references;
        this.subject = subject;
        this.sentDate = sentDate;
        this.from = from;
        this.to = to;
        this.cc = cc;
        this.sc = sc;
        this.content = content;
        this.encrypted = encrypted;
        this.signed = signed;
        this.size = size;
        this.isRead = isRead;
        this.isDeleted = isDeleted;
        this.isMarked = isMarked;
        this.hasAttachment = hasAttachment;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.directoryId = directoryId;
        this.sentPercentage = sentPercentage;
        this.sendStatus = sendStatus;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMailDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getMessageId() {
        return messageId;
    }

    public void setMessageId(String messageId) {
        this.messageId = messageId;
    }

    public String getReferences() {
        return references;
    }

    public void setReferences(String references) {
        this.references = references;
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public Long getSentDate() {
        return sentDate;
    }

    public void setSentDate(Long sentDate) {
        this.sentDate = sentDate;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public String getCc() {
        return cc;
    }

    public void setCc(String cc) {
        this.cc = cc;
    }

    public String getSc() {
        return sc;
    }

    public void setSc(String sc) {
        this.sc = sc;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getSize() {
        return size;
    }

    public void setSize(String size) {
        this.size = size;
    }

    public boolean getEncrypted() {return encrypted;}

    public void setEncrypted(boolean encrypted) {this.encrypted = encrypted;}

    public boolean getSigned() {return signed;}

    public void setSigned(boolean signed) {this.signed = signed;}

    public boolean getIsRead() {
        return isRead;
    }

    public void setIsRead(boolean isRead) {
        this.isRead = isRead;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public boolean getIsMarked() {
        return isMarked;
    }

    public void setIsMarked(boolean isMarked) {
        this.isMarked = isMarked;
    }

    public boolean getHasAttachment() {
        return hasAttachment;
    }

    public void setHasAttachment(boolean hasAttachment) {
        this.hasAttachment = hasAttachment;
    }

    public java.util.Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(java.util.Date createTime) {
        this.createTime = createTime;
    }

    public java.util.Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(java.util.Date updateTime) {
        this.updateTime = updateTime;
    }

    public long getDirectoryId() {
        return directoryId;
    }

    public void setDirectoryId(long directoryId) {
        this.directoryId = directoryId;
    }

    public long getSentPercentage() {
        return sentPercentage;
    }

    public void setSentPercentage(long sentPercentage) {
        this.sentPercentage = sentPercentage;
    }

    /**
     * @return 0：已收取 1：已发送 2：待发送 3：正在发送 4：发送失败
     */
    public long getSendStatus() {
        return sendStatus;
    }

    /**
     * @param sendStatus 0：已收取 1：已发送 2：待发送 3：正在发送 4：发送失败
     */
    public void setSendStatus(long sendStatus) {
        this.sendStatus = sendStatus;
    }

    /** To-one relationship, resolved on first access. */
    public MailDirectory getMailDirectory() {
        long __key = this.directoryId;
        if (mailDirectory__resolvedKey == null || !mailDirectory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MailDirectoryDao targetDao = daoSession.getMailDirectoryDao();
            MailDirectory mailDirectoryNew = targetDao.load(__key);
            synchronized (this) {
                mailDirectory = mailDirectoryNew;
            	mailDirectory__resolvedKey = __key;
            }
        }
        return mailDirectory;
    }

    public void setMailDirectory(MailDirectory mailDirectory) {
        if (mailDirectory == null) {
            throw new DaoException("To-one property 'directoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.mailDirectory = mailDirectory;
            directoryId = mailDirectory.getId();
            mailDirectory__resolvedKey = directoryId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MailAttachment> getAttachments() {
        if (attachments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MailAttachmentDao targetDao = daoSession.getMailAttachmentDao();
            List<MailAttachment> attachmentsNew = targetDao._queryMailDetail_Attachments(id);
            synchronized (this) {
                if(attachments == null) {
                    attachments = attachmentsNew;
                }
            }
        }
        return attachments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAttachments() {
        attachments = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
