package com.inspur.playwork.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import com.inspur.playwork.utils.db.bean.MailAttachment;
import com.inspur.playwork.utils.db.bean.MailDetail;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import static com.bumptech.glide.gifdecoder.GifHeaderParser.TAG;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL_ATTACHMENT".
*/
public class MailAttachmentDao extends AbstractDao<MailAttachment, Long> {

    public static final String TABLENAME = "MAIL_ATTACHMENT";

    /**
     * Properties of entity MailAttachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Size = new Property(4, Long.class, "size", false, "SIZE");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property MailId = new Property(7, long.class, "mailId", false, "MAIL_ID");
    };

    private DaoSession daoSession;

    private Query<MailAttachment> mailDetail_AttachmentsQuery;

    public void clearAttachmentsQuery(){
        Log.i(TAG, "clearAttachmentsQuery: ```````````");
        mailDetail_AttachmentsQuery = null;
    }

    public MailAttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public MailAttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_ATTACHMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"URL\" TEXT," + // 3: url
                "\"SIZE\" INTEGER," + // 4: size
                "\"EMAIL\" TEXT NOT NULL ," + // 5: email
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"MAIL_ID\" INTEGER NOT NULL );"); // 7: mailId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_ATTACHMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MailAttachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(5, size);
        }
        stmt.bindString(6, entity.getEmail());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
        stmt.bindLong(8, entity.getMailId());
    }

    @Override
    protected void attachEntity(MailAttachment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MailAttachment readEntity(Cursor cursor, int offset) {
        MailAttachment entity = new MailAttachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // size
            cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createTime
            cursor.getLong(offset + 7) // mailId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MailAttachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEmail(cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setMailId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MailAttachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MailAttachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachments" to-many relationship of MailDetail. */
    public List<MailAttachment> _queryMailDetail_Attachments(long mailId) {
        Log.i(TAG, "_queryMailDetail_Attachments: ````````````````````");
        synchronized (this) {
            if (mailDetail_AttachmentsQuery == null) {
                QueryBuilder<MailAttachment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MailId.eq(null));
                mailDetail_AttachmentsQuery = queryBuilder.build();
            }
        }
        Query<MailAttachment> query = mailDetail_AttachmentsQuery.forCurrentThread();
        query.setParameter(0, mailId);
        return query.list();
//        QueryBuilder<MailAttachment> queryBuilder = queryBuilder();
//        queryBuilder.where(Properties.MailId.eq(mailId));
//        return queryBuilder.list();
    }

    /** Internal query to resolve the "attachments" to-many relationship of MailDetail. */
    public void _delete_mail_Attachments(long mailId) {
        QueryBuilder<MailAttachment> queryBuilder = queryBuilder();
        queryBuilder.where(Properties.MailId.eq(mailId));
        queryBuilder.buildDelete().executeDeleteWithoutDetachingEntities();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMailDetailDao().getAllColumns());
            builder.append(" FROM MAIL_ATTACHMENT T");
            builder.append(" LEFT JOIN MAIL_DETAIL T0 ON T.\"MAIL_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MailAttachment loadCurrentDeep(Cursor cursor, boolean lock) {
        MailAttachment entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MailDetail mailDetail = loadCurrentOther(daoSession.getMailDetailDao(), cursor, offset);
         if(mailDetail != null) {
            entity.setMailDetail(mailDetail);
        }

        return entity;    
    }

    public MailAttachment loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MailAttachment> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MailAttachment> list = new ArrayList<MailAttachment>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MailAttachment> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MailAttachment> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
