package com.inspur.playwork.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import com.inspur.playwork.utils.db.bean.MailTask;

import java.util.Date;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import static com.bumptech.glide.gifdecoder.GifHeaderParser.TAG;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "MAIL_TASK".
*/

public class MailTaskDao extends AbstractDao<MailTask, Long> {

    public static final String TABLENAME = "MAIL_TASK";

    /**
     * Properties of entity MailTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */

    public static class Properties {
        public final static Property Id             = new Property(0, Long.class,   "id", true, "_id");
        public final static Property Email          = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property References     = new Property(2, String.class, "references", false, "REFERENCES");
        public final static Property Subject        = new Property(3, String.class, "subject", false, "SUBJECT");
        public final static Property CreateTime     = new Property(4, Date.class,   "createTime", false, "CREATE_TIME");
        public final static Property NickName       = new Property(5, String.class, "nickName", false, "NICK_NAME");
        public final static Property To             = new Property(6, String.class, "to", false, "TO");
        public final static Property Cc             = new Property(7, String.class, "cc", false, "CC");
        public final static Property MessageFilePath = new Property(8, String.class, "messageFilePath", false, "MESSAGE_FILE_PATH");
        public final static Property IsEncrypted    = new Property(9, Boolean.class, "isEncrypted", false, "IS_ENCRYPTED");
        public final static Property PublicKeys     = new Property(10, String.class, "publicKeys", false, "PUBLIC_KEYS");
        public final static Property MailRcpts      = new Property(11, String.class, "mailRcpts", false, "MAIL_RCPTS");
        public final static Property Account        = new Property(12, String.class, "account", false, "ACCOUNT");
        public final static Property Password       = new Property(13, String.class, "password", false, "PASSWORD");
        public final static Property OutgoingHost   = new Property(14, String.class, "outgoingHost", false, "OUT_GOING_HOST");
        public final static Property OutgoingPort   = new Property(15, String.class, "outgoingPort", false, "OUT_GOING_PORT");
        public final static Property OutgoingSSL    = new Property(16, Boolean.class, "outgoingSSL", false, "OUT_GOING_SSL");
        public final static Property OutgoingTLS    = new Property(17, Boolean.class, "outgoingTLS", false, "OUT_GOING_TLS");
        public final static Property RcptCount      = new Property(18, Long.class, "rcptCount", false, "RCPT_COUNT");
        public final static Property SentRcptCount  = new Property(19, Long.class, "sentRcptCount", false, "SENT_RCPT_COUNT");
    };

    private DaoSession daoSession;

    public MailTaskDao(DaoConfig config) {
        super(config);
    }

    public MailTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        Log.i(TAG, "createTable: MAIL_TASK");
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMAIL\" TEXT NOT NULL," + // 1: email
                "\"REFERENCES\" TEXT," + // 2: references
                "\"SUBJECT\" TEXT NOT NULL," + // 3: subject
                "\"CREATE_TIME\" TEXT NOT NULL," + // 4: createTime
                "\"NICK_NAME\" TEXT," + // 5: nickName
                "\"TO\" TEXT NOT NULL," + // 6: to
                "\"CC\" TEXT," + // 7: cc
                "\"MESSAGE_FILE_PATH\" TEXT NOT NULL," + // 8: messageFilePath
                "\"IS_ENCRYPTED\" INTEGER NOT NULL," + // 9: isEncrypted
                "\"PUBLIC_KEYS\" TEXT," + // 10: publicKeys
                "\"MAIL_RCPTS\" TEXT NOT NULL," + // 11: size
                "\"ACCOUNT\" TEXT NOT NULL," + // 12: account
                "\"PASSWORD\" TEXT NOT NULL," + // 13: password
                "\"OUT_GOING_HOST\" TEXT NOT NULL," + // 14: outGoningHost
                "\"OUT_GOING_PORT\" TEXT NOT NULL," + // 15: outGoningPort
                "\"OUT_GOING_SSL\" INTEGER NOT NULL," + // 16: outGoningSSL
                "\"OUT_GOING_TLS\" INTEGER NOT NULL," + // 17: outGoningTLS
                "\"RCPT_COUNT\" INTEGER NOT NULL," + // 18: rcptCount
                "\"SENT_RCPT_COUNT\" INTEGER NOT NULL);"); // 19: sendRcptCount
    }

/** Drops the underlying database table. */

    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_TASK\"";
        db.execSQL(sql);
    }


/** @inheritdoc */

    @Override
    protected void bindValues(SQLiteStatement stmt, MailTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEmail());
 
        String references = entity.getReferences();
        if (references != null) {
            stmt.bindString(3, references);
        }
 
        stmt.bindString(4, entity.getSubject());

        stmt.bindLong(5, entity.getCreateTime());

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        stmt.bindString(7, entity.getTo());

        String cc = entity.getCc();
        if (cc != null) {
            stmt.bindString(8, cc);
        }
        
        stmt.bindString(9, entity.getMessageFilePath());

        stmt.bindLong(10, entity.getEncrypted()?1L:0L);

        String publicKeys = entity.getPublicKeys();
        if (publicKeys != null) {
            stmt.bindString(11, publicKeys);
        }
 
        stmt.bindString(12, entity.getMailRcpts());

        stmt.bindString(13, entity.getAccount());

        stmt.bindString(14, entity.getPassword());

        stmt.bindString(15, entity.getOutgoingHost());

        stmt.bindString(16, entity.getOutgoingPort());

        Boolean outgoingSSL = entity.getOutgoingSSL();
        stmt.bindLong(17, outgoingSSL? 1L: 0L);

        Boolean outgoingTLS = entity.getOutgoingTLS();
        stmt.bindLong(18, outgoingTLS? 1L: 0L);

        stmt.bindLong(19, entity.getRcptCount());

        stmt.bindLong(20, entity.getSentRcptCount());

    }

    @Override
    protected void attachEntity(MailTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }


/** @inheritdoc */

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    


/** @inheritdoc */

    @Override
    public MailTask readEntity(Cursor cursor, int offset) {
        MailTask entity = new MailTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // references
            cursor.getString(offset + 3), // subject
            cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.getString(offset + 6), // to
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cc
            cursor.getString(offset + 8), // messageFilePath
            cursor.isNull(offset + 9) ? false : cursor.getShort(offset + 9) != 0, // isEncrypted
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // publicKeys;
            cursor.getString(offset + 11), // mailRcpts
            cursor.getString(offset + 12), // account
            cursor.getString(offset + 13), // password
            cursor.getString(offset + 14), // outgoingHost
            cursor.getString(offset + 15), // outgoingPort
            cursor.getShort(offset + 16) != 0, // outgoingSSL
            cursor.getShort(offset + 17) != 0, // outgoingTLS
            cursor.getLong(offset + 18), // rcptCount
            cursor.getLong(offset + 19) //sentRcptCount
        );
        return entity;
    }

/** @inheritdoc */

    @Override
    public void readEntity(Cursor cursor, MailTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.getString(offset + 1));
        entity.setReferences(cursor.isNull(offset + 2) ? "" : cursor.getString(offset + 2));
        entity.setSubject(cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTo(cursor.getString(offset + 6));
        entity.setCc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessageFilePath(cursor.getString(offset + 8));
        entity.setEncrypted(cursor.getShort(offset + 9)!= 0);
        entity.setPublicKeys(cursor.isNull(offset + 10) ? "" : cursor.getString(offset + 10));
        entity.setMailRcpts(cursor.getString(offset + 11));
        entity.setAccount(cursor.getString(offset + 12));
        entity.setPassword(cursor.getString(offset + 13));
        entity.setOutgoingHost(cursor.getString(offset + 14));
        entity.setOutgoingPort(cursor.getString(offset + 15));
        entity.setOutgoingSSL(cursor.getShort(offset + 16) != 0);
        entity.setOutgoingTLS(cursor.getShort(offset + 17) != 0);
        entity.setRcptCount(cursor.getLong(offset + 18));
        entity.setSentRcptCount(cursor.getLong(offset + 19));
     }
    
/** @inheritdoc */

    @Override
    protected Long updateKeyAfterInsert(MailTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

/** @inheritdoc */

    @Override
    public Long getKey(MailTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

/** @inheritdoc */

    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

}
