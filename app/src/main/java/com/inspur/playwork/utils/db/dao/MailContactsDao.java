package com.inspur.playwork.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.inspur.playwork.utils.db.bean.MailContacts;

import java.io.UnsupportedEncodingException;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL_CONTACTS".
*/
public class MailContactsDao extends AbstractDao<MailContacts, Long> {

    public static final String TABLENAME = "MAIL_CONTACTS";

    /**
     * Properties of entity MailContacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Personal = new Property(2, String.class, "personal", false, "PERSONAL");
    };


    public MailContactsDao(DaoConfig config) {
        super(config);
    }
    
    public MailContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_CONTACTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT NOT NULL ," + // 1: address
                "\"PERSONAL\" TEXT);"); // 2: personal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_CONTACTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MailContacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null)
            stmt.bindLong(1, id);
        stmt.bindString(2, entity.getAddress());
        String personal = entity.getPersonal();
        if(personal != null)
            stmt.bindString(3, personal);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MailContacts readEntity(Cursor cursor, int offset) {
        MailContacts entity = null;
        try {
            entity = new MailContacts(
                cursor.getString(offset + 1), // address
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // personal
            );
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MailContacts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.getString(offset + 1));
        try {
            entity.setPersonal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MailContacts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MailContacts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
