package com.inspur.playwork.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.inspur.playwork.utils.db.bean.MailDetail;
import com.inspur.playwork.utils.db.bean.MailDirectory;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL_DETAIL".
*/
public class MailDetailDao extends AbstractDao<MailDetail, Long> {

    public static final String TABLENAME = "MAIL_DETAIL";

    /**
     * Properties of entity MailDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property MessageId = new Property(3, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property References = new Property(4, String.class, "references", false, "REFERENCES");
        public final static Property Subject = new Property(5, String.class, "subject", false, "SUBJECT");
        public final static Property SentDate = new Property(6, Long.class, "sentDate", false, "SENT_DATE");
        public final static Property From = new Property(7, String.class, "from", false, "FROM");
        public final static Property To = new Property(8, String.class, "to", false, "TO");
        public final static Property Cc = new Property(9, String.class, "cc", false, "CC");
        public final static Property Sc = new Property(10, String.class, "sc", false, "SC");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
        public final static Property Encrypted = new Property(12, Integer.class, "encrypted", false, "ENCRYPTED");
        public final static Property Signed = new Property(13, Integer.class, "signed", false, "SIGNED");
        public final static Property Size = new Property(14, String.class, "size", false, "SIZE");
        public final static Property IsRead = new Property(15, Boolean.class, "isRead", false, "IS_READ");
        public final static Property IsDeleted = new Property(16, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property IsMarked = new Property(17, Boolean.class, "isMarked", false, "IS_MARKED");
        public final static Property HasAttachment = new Property(18, Boolean.class, "hasAttachment", false, "HAS_ATTACHMENT");
        public final static Property CreateTime = new Property(19, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(20, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property DirectoryId = new Property(21, long.class, "directoryId", false, "DIRECTORY_ID");
        public final static Property SentPercentage = new Property(22, long.class, "sentPercentage", false, "SENT_PERCENTAGE");
        public final static Property SendStatus = new Property(23, long.class, "sendStatus", false, "SEND_STATUS");
    };

    private DaoSession daoSession;

    private Query<MailDetail> mailDirectory_MailsQuery;

    public MailDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MailDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMAIL\" TEXT NOT NULL ," + // 1: email
                "\"UID\" TEXT," + // 2: uid
                "\"MESSAGE_ID\" TEXT," + // 3: messageId
                "\"REFERENCES\" TEXT," + // 4: references
                "\"SUBJECT\" TEXT," + // 5: subject
                "\"SENT_DATE\" INTEGER," + // 6: sentDate
                "\"FROM\" TEXT," + // 7: from
                "\"TO\" TEXT," + // 8: to
                "\"CC\" TEXT," + // 9: cc
                "\"SC\" TEXT," + // 10: sc
                "\"CONTENT\" TEXT," + // 11: content
                "\"ENCRYPTED\" INTEGER," + // 12: encrypted
                "\"SIGNED\" INTEGER," + // 13: signed
                "\"SIZE\" TEXT," + // 14: size
                "\"IS_READ\" INTEGER," + // 15: isRead
                "\"IS_DELETED\" INTEGER," + // 16: isDeleted
                "\"IS_MARKED\" INTEGER," + // 17: isMarked
                "\"HAS_ATTACHMENT\" INTEGER," + // 18: hasAttachment
                "\"CREATE_TIME\" INTEGER," + // 19: createTime
                "\"UPDATE_TIME\" INTEGER," + // 20: updateTime
                "\"DIRECTORY_ID\" INTEGER NOT NULL,"+ // 21: directoryId
                "\"SENT_PERCENTAGE\" INTEGER,"+ // 22: sent_percentage
                "\"SEND_STATUS\" INTEGER NOT NULL);");//23 SendStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MailDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEmail());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(4, messageId);
        }
 
        String references = entity.getReferences();
        if (references != null) {
            stmt.bindString(5, references);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(6, subject);
        }
 
        Long sentDate = entity.getSentDate();
        if (sentDate != null) {
            stmt.bindLong(7, sentDate);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(8, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(9, to);
        }
 
        String cc = entity.getCc();
        if (cc != null) {
            stmt.bindString(10, cc);
        }
 
        String sc = entity.getSc();
        if (sc != null) {
            stmt.bindString(11, sc);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
 
        boolean encrypted = entity.getEncrypted();
        stmt.bindLong(13, encrypted? 1L: 0L);

        boolean signed = entity.getSigned();
        stmt.bindLong(14, signed? 1L: 0L);

        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(15, size);
        }
 
        boolean isRead = entity.getIsRead();
        stmt.bindLong(16, isRead ? 1L: 0L);

        boolean isDeleted = entity.getIsDeleted();
        stmt.bindLong(17, isDeleted ? 1L: 0L);

        boolean isMarked = entity.getIsMarked();
            stmt.bindLong(18, isMarked ? 1L: 0L);

        boolean hasAttachment = entity.getHasAttachment();
        stmt.bindLong(19, hasAttachment ? 1L: 0L);

        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(20, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(21, updateTime.getTime());
        }
        stmt.bindLong(22, entity.getDirectoryId());

        Long sentPercentage = entity.getSentPercentage();
        if (sentPercentage != null) {
            stmt.bindLong(23, sentPercentage);
        }

        stmt.bindLong(24, entity.getSendStatus());
    }

    @Override
    protected void attachEntity(MailDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MailDetail readEntity(Cursor cursor, int offset) {
        MailDetail entity = new MailDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // references
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subject
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // sentDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // from
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // to
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sc
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // content
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // encrypted
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // signed
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // size
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isRead
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isDeleted
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isMarked
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // hasAttachment
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // createTime
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // updateTime
            cursor.getLong(offset + 21), // directoryId
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // sentPercentage
            cursor.getLong(offset + 23) // SendStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MailDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReferences(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSubject(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSentDate(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFrom(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEncrypted(cursor.isNull(offset + 12) ? false : cursor.getShort(offset + 12)!= 0);
        entity.setSigned(cursor.isNull(offset + 13) ? false : cursor.getShort(offset + 13)!= 0);
        entity.setSize(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsRead(cursor.isNull(offset + 15) ? false : cursor.getShort(offset + 15) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 16) ? false : cursor.getShort(offset + 16) != 0);
        entity.setIsMarked(cursor.isNull(offset + 17) ? false : cursor.getShort(offset + 17) != 0);
        entity.setHasAttachment(cursor.isNull(offset + 18) ? false : cursor.getShort(offset + 18) != 0);
        entity.setCreateTime(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setUpdateTime(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setDirectoryId(cursor.getLong(offset + 21));
        entity.setSentPercentage(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setSendStatus(cursor.getLong(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MailDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MailDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mails" to-many relationship of MailDirectory. */
    public List<MailDetail> _queryMailDirectory_Mails(long directoryId) {
        synchronized (this) {
            if (mailDirectory_MailsQuery == null) {
                QueryBuilder<MailDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DirectoryId.eq(null));
                queryBuilder.orderRaw("T.'SENT_DATE' DESC");
                mailDirectory_MailsQuery = queryBuilder.build();
            }
        }
        Query<MailDetail> query = mailDirectory_MailsQuery.forCurrentThread();
        query.setParameter(0, directoryId);
        return query.list();
    }

    public MailDetail _queryMailBySentDate(String email,long sentDate) {
        QueryBuilder<MailDetail> queryBuilder = queryBuilder();
        queryBuilder.where(Properties.SentDate.eq(sentDate),Properties.Email.eq(email));
        List<MailDetail> resList = queryBuilder.list();
        if(resList.size()>0){
            return resList.get(0);
        }else return null;
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMailDirectoryDao().getAllColumns());
            builder.append(" FROM MAIL_DETAIL T");
            builder.append(" LEFT JOIN MAIL_DIRECTORY T0 ON T.\"DIRECTORY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MailDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        MailDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MailDirectory mailDirectory = loadCurrentOther(daoSession.getMailDirectoryDao(), cursor, offset);
         if(mailDirectory != null) {
            entity.setMailDirectory(mailDirectory);
        }

        return entity;    
    }

    public MailDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MailDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MailDetail> list = new ArrayList<MailDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MailDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MailDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
